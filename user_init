#!/bin/bash
# This script is executed every time your instance is spawned.

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Create a log file in the same directory
LOG_FILE="${SCRIPT_DIR}/user_init.log"
exec > >(tee -a $LOG_FILE) 2>&1

# Log start time
echo "Script started at $(date)"

# Install python2
sudo apt-get install -y python2 && echo "Python2 installed successfully" || echo "Failed to install Python2"

# Install terminator
# sudo apt-get install -y terminator && echo "Terminator installed successfully" || echo "Failed to install Terminator"

# Install dirsearch
sudo apt-get install -y dirsearch && echo "Dirsearch installed successfully" || echo "Failed to install Dirsearch"

# Clone SecLists repository and move it to /usr/share/seclists
if [ ! -d "/usr/share/seclists" ]; then
    git clone https://github.com/danielmiessler/SecLists.git && \
    sudo mv SecLists /usr/share/seclists && \
    echo "SecLists cloned and moved successfully" || \
    echo "Failed to clone and move SecLists"
else
    echo "SecLists already exists in /usr/share/seclists"
fi

# Update the package list
sudo apt-get update -y && echo "Package list updated successfully" || echo "Failed to update package list"

# Function to log messages
log() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
}

# Function to kill the process holding the dpkg lock
kill_dpkg_lock() {
    while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
        log "Waiting for dpkg lock to be released..."
        PID=$(sudo lsof -t /var/lib/dpkg/lock-frontend)
        if [ -n "$PID" ]; then
            log "Killing process $PID holding dpkg lock..."
            sudo kill -9 $PID
            sleep 5
        fi
    done
}

# Fix duplicate docker entries
log "Checking for duplicate entries in docker.list..."
if grep -q "docker.list:1" /etc/apt/sources.list.d/docker.list; then
    sudo sed -i '1,2d' /etc/apt/sources.list.d/docker.list
fi

# Handle interrupted dpkg
log "Ensuring dpkg is configured correctly..."
kill_dpkg_lock
sudo dpkg --configure -a

# Update package list and uninstall existing sqlmap
log "Updating package list..."
kill_dpkg_lock
sudo apt-get update -y

log "Removing existing sqlmap installation..."
kill_dpkg_lock
sudo apt-get remove --purge -y sqlmap

# Install dependencies
log "Installing dependencies..."
kill_dpkg_lock
sudo apt-get install -y git python3 python3-pip

# Clone the latest version of SQLMap from GitHub
if [ -d "/opt/sqlmap" ]; then
    log "Removing existing /opt/sqlmap directory..."
    sudo rm -rf /opt/sqlmap
fi
log "Cloning the latest sqlmap from GitHub..."
git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git /opt/sqlmap

# Create a symbolic link to the sqlmap.py script
log "Creating symbolic link for sqlmap..."
sudo ln -sf /opt/sqlmap/sqlmap.py /usr/local/bin/sqlmap

# Verify the installation
log "Verifying sqlmap installation..."
if sqlmap --version; then
    log "SQLMap installation completed successfully."
else
    log "SQLMap installation failed."
fi

# Update and upgrade all packages
log "Updating and upgrading all packages..."
sudo apt-get update -y && sudo apt-get upgrade -y && echo "Packages updated and upgraded successfully" || echo "Failed to update and upgrade packages"

# Log end time
echo "Script ended at $(date)"
